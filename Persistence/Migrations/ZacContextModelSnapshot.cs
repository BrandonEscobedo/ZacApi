// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.ContextDb;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ZacContext))]
    partial class ZacContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.DbModels.Alimento", b =>
                {
                    b.Property<int?>("IdAlimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("IdAlimento"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Unidad")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("IdAlimento");

                    b.HasIndex("IdCategoria");

                    b.ToTable("Alimentos");
                });

            modelBuilder.Entity("Domain.DbModels.CategoriaAlimento", b =>
                {
                    b.Property<int?>("IdCategoriaAlimento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("IdCategoriaAlimento"));

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdCategoriaAlimento");

                    b.HasIndex("Categoria")
                        .IsUnique();

                    b.ToTable("CategoriaAlimentos");
                });

            modelBuilder.Entity("Domain.DbModels.Ingrediente", b =>
                {
                    b.Property<Guid>("IdIngrediente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("IdAlimento")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdReceta")
                        .HasColumnType("uuid");

                    b.Property<string>("TipoIngrediente")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("UnidadesTotales")
                        .HasColumnType("integer");

                    b.HasKey("IdIngrediente");

                    b.HasIndex("IdAlimento");

                    b.HasIndex("IdReceta");

                    b.ToTable("Ingredientes");
                });

            modelBuilder.Entity("Domain.DbModels.PacientePadecimiento", b =>
                {
                    b.Property<Guid>("IdPaciente")
                        .HasColumnType("uuid");

                    b.Property<int>("IdPadecimiento")
                        .HasColumnType("integer");

                    b.HasKey("IdPaciente", "IdPadecimiento");

                    b.HasIndex("IdPadecimiento");

                    b.ToTable("PacientePadecimientos");
                });

            modelBuilder.Entity("Domain.DbModels.Pacientes.Paciente", b =>
                {
                    b.Property<Guid>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IdPaciente");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("Domain.DbModels.Pacientes.PacienteContacto", b =>
                {
                    b.Property<Guid>("IdPaciente")
                        .HasColumnType("uuid");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("GastoSemanal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Ocupacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Telefono")
                        .HasColumnType("integer");

                    b.HasKey("IdPaciente");

                    b.ToTable("PacienteContacto");
                });

            modelBuilder.Entity("Domain.DbModels.Pacientes.PacientePersonales", b =>
                {
                    b.Property<Guid>("IdPaciente")
                        .HasColumnType("uuid");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("Edad")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IdPaciente");

                    b.ToTable("PacientePersonales");
                });

            modelBuilder.Entity("Domain.DbModels.Pacientes.PacienteSintomasAntecedentes", b =>
                {
                    b.Property<Guid>("IdPaciente")
                        .HasColumnType("uuid");

                    b.Property<string>("AntecedentesFamiliares")
                        .HasColumnType("text");

                    b.Property<string>("AntecedentesPersonales")
                        .HasColumnType("text");

                    b.Property<string>("Signos")
                        .HasColumnType("text");

                    b.Property<string>("Sintomas")
                        .HasColumnType("text");

                    b.HasKey("IdPaciente");

                    b.ToTable("PacienteSintomasAntecedentes");
                });

            modelBuilder.Entity("Domain.DbModels.Padecimiento", b =>
                {
                    b.Property<int>("IdPadecimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPadecimiento"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("IdPadecimiento");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Padecimientos");
                });

            modelBuilder.Entity("Domain.DbModels.Recetas", b =>
                {
                    b.Property<Guid>("IdReceta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("IdTipoReceta")
                        .HasColumnType("integer");

                    b.Property<string>("ModoPreparacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreReceta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IdReceta");

                    b.HasIndex("IdTipoReceta");

                    b.ToTable("Recetas");
                });

            modelBuilder.Entity("Domain.DbModels.TipoReceta", b =>
                {
                    b.Property<int>("IdTipoReceta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTipoReceta"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreReceta")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.HasKey("IdTipoReceta");

                    b.ToTable("TipoRecetas");
                });

            modelBuilder.Entity("Domain.DbModels.Alimento", b =>
                {
                    b.HasOne("Domain.DbModels.CategoriaAlimento", "categoriaAlimentoNav")
                        .WithMany("AlimentosNav")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categoriaAlimentoNav");
                });

            modelBuilder.Entity("Domain.DbModels.Ingrediente", b =>
                {
                    b.HasOne("Domain.DbModels.Alimento", "AlimentoNav")
                        .WithMany("IngredienteNav")
                        .HasForeignKey("IdAlimento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DbModels.Recetas", "RecetaNav")
                        .WithMany("Ingredientes")
                        .HasForeignKey("IdReceta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlimentoNav");

                    b.Navigation("RecetaNav");
                });

            modelBuilder.Entity("Domain.DbModels.PacientePadecimiento", b =>
                {
                    b.HasOne("Domain.DbModels.Pacientes.Paciente", "Paciente")
                        .WithMany("PacientePadecimientos")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DbModels.Padecimiento", "Padecimiento")
                        .WithMany("PacientePadecimientos")
                        .HasForeignKey("IdPadecimiento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Padecimiento");
                });

            modelBuilder.Entity("Domain.DbModels.Pacientes.PacienteContacto", b =>
                {
                    b.HasOne("Domain.DbModels.Pacientes.Paciente", "Paciente")
                        .WithOne("Contacto")
                        .HasForeignKey("Domain.DbModels.Pacientes.PacienteContacto", "IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Domain.DbModels.Pacientes.PacientePersonales", b =>
                {
                    b.HasOne("Domain.DbModels.Pacientes.Paciente", "Paciente")
                        .WithOne("Personales")
                        .HasForeignKey("Domain.DbModels.Pacientes.PacientePersonales", "IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Domain.DbModels.Pacientes.PacienteSintomasAntecedentes", b =>
                {
                    b.HasOne("Domain.DbModels.Pacientes.Paciente", "Paciente")
                        .WithOne("SintomasAntecedentes")
                        .HasForeignKey("Domain.DbModels.Pacientes.PacienteSintomasAntecedentes", "IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Domain.DbModels.Recetas", b =>
                {
                    b.HasOne("Domain.DbModels.TipoReceta", "TipoRecetaNav")
                        .WithMany("Recetas")
                        .HasForeignKey("IdTipoReceta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoRecetaNav");
                });

            modelBuilder.Entity("Domain.DbModels.Alimento", b =>
                {
                    b.Navigation("IngredienteNav");
                });

            modelBuilder.Entity("Domain.DbModels.CategoriaAlimento", b =>
                {
                    b.Navigation("AlimentosNav");
                });

            modelBuilder.Entity("Domain.DbModels.Pacientes.Paciente", b =>
                {
                    b.Navigation("Contacto")
                        .IsRequired();

                    b.Navigation("PacientePadecimientos");

                    b.Navigation("Personales")
                        .IsRequired();

                    b.Navigation("SintomasAntecedentes")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.DbModels.Padecimiento", b =>
                {
                    b.Navigation("PacientePadecimientos");
                });

            modelBuilder.Entity("Domain.DbModels.Recetas", b =>
                {
                    b.Navigation("Ingredientes");
                });

            modelBuilder.Entity("Domain.DbModels.TipoReceta", b =>
                {
                    b.Navigation("Recetas");
                });
#pragma warning restore 612, 618
        }
    }
}
